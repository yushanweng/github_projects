#include "iostm8s103.h"
//#include "stm8s.h"
#include "stm8s_gpio.h"
//#include "stm8s_i2c.h"
//#include "stm8s_uart1.h"
/*
程式說明
建立MODBUS RELAY
目標:
用上位控制器控制relay
局號: 
21 06 10 00 01 01 OUT1 ON 
21 06 10 00 01 00 OUT1 OFF 
21 06 10 00 02 01 OUT2 ON 
21 06 10 00 02 00 OUT2 OFF
21 06 10 00 03 01 OUT3 ON 
21 06 10 00 03 00 OUT3 OFF
21 06 10 00 04 01 OUT4 ON 
21 06 10 00 04 00 OUT4 OFF
問題:
PD4的LED無效

	*/
/*
輸入接腳
k1 k2 k3 k4 k5 k6 k7 k8
c3 c4 c5 c6 c7 d2 d3 d4
modbus_定位移動
	*/
//k1 k2 k3 k4
//D3 D2 C7 C6
//0000 1000
#define IN1        flag10=PD_IDR & 0x08 //D3
//0000 0100
#define IN2   		 flag10=PD_IDR & 0x04 //D2
//1000 0000
#define IN3   		 flag10=PC_IDR & 0x80 //C7
//0100 0000
#define IN4   		 flag10=PC_IDR & 0x40 //C6

//k1 k2 k3 k4
//C5 C4 C3 B4
//輸出 PC5=1
//0010 0000
#define OUT1_OFF  PC_ODR |= 0x20
//輸出 PC5=0
//1101 1111
#define OUT1_ON   PC_ODR &= 0xdf
//輸出 PC4=1
//0001 0000
#define OUT2_OFF  PC_ODR |= 0x10
//輸出 PC4=0
//1110 1111
#define OUT2_ON   PC_ODR &= 0xef
//輸出 PC3=1
//0000 1000
#define OUT3_OFF  PC_ODR |= 0x08
//輸出 PC3=0
//1111 0111
#define OUT3_ON   PC_ODR &= 0xf7
//輸出 PB4=1
//0001 0000
#define OUT4_OFF  PB_ODR |= 0x10
//輸出 PB4=0
//1110 1111
#define OUT4_ON   PB_ODR &= 0xef






//輸出 PD4=1
//0001 0000
#define USART_ON_LED  PD_ODR |= 0x10
//輸出 PD4=0
//1110 1111
#define USART_OFF_LED  PD_ODR &= 0xef









/*旗標*/

unsigned int flag0=0;
unsigned int flag1=95;//傳送歌曲值
unsigned int flag2=0;//讀取K1-K8 KEY
unsigned int flag3=0;//處理GPIO值
unsigned int flag4=0;//IO處理
unsigned int flag5=0;//IO處理
unsigned int flag6=0;//uart 傳來音段數值
unsigned int flag7=0;//en/dis encode 
unsigned int flag8=0;//讀取up/down/stop暫存器
unsigned int flag9=0;
unsigned int flag10=0;//out 旗標
unsigned int flag11=0x21;//局號
unsigned int flag12=0;//
unsigned int flag13=0;//
unsigned int flag14=0;//
unsigned int flag15=0;//
unsigned int flag16=0;//
unsigned int flag17=0;//
unsigned int flag18=0;//
unsigned int flag19=0;//
unsigned int flag20=0;//
unsigned int flag21=0;//y
unsigned int flag22=0;//
unsigned int flag23=0;
unsigned int flag24=0;//
unsigned int flag25=0;
unsigned int flag26=0;
unsigned int flag27=0;
unsigned int flag28=0;
unsigned int flag29=0;
unsigned int flag30=0;







//發送端CRC LOW
unsigned char flag47=0;
//發送端CRC HIGH
unsigned char flag48=0;
//CRC_16 LOW
//unsigned char flag68=0;
unsigned char flag49=0;
//unsigned char flag70=0;
//CRC_16 HIGH
unsigned char flag50=0;
unsigned int flag71=0;
unsigned int flag72=0;
unsigned int flag73=0;
unsigned int flag74=0;
unsigned int flag75=0;
unsigned int flag76=0;
unsigned int flag77=0;
unsigned int flag78=0;
unsigned int flag79=0;
unsigned int flag80=0;
unsigned int flag81=0;
unsigned int flag82=0;

unsigned char i=0;



//通信訊號指標
unsigned char datax[10];
unsigned char length;	//通信訊號長度



#define UART1_IDLE (UART1_SR&0x08)
#define UART1_RxNE (UART1_SR&0x20)
void DISP_LED(void);
void STM8_GPIO(void);//gpio設定輸出入
void Init_UART(void);
void UART1_sendchar(unsigned char j);
void ENCODE(void);
void LINE_IN(void);
void ENCODE_IN(void);
void UART_TX_IQU (void);//MODBUS傳送

//07 06 00 2C 00 00 正轉方向設定
void MOTO_CW_SET(void);
//07 06 00 2C 00 01 反轉方向設定
void MOTO_CCW_SET(void);
//07 06 00 20 00 11 手動正轉
void MOTO_CW(void);
//07 06 00 20 00 12 手動反轉
void MOTO_CCW(void);
//07 06 00 00 00 02 下次目標位置啟動
void MOTO_TO_NEXT_POINT(void);
//07 06 00 20 00 10 啟動
void MOTO_STAR(void);
//07 06 00 20 00 00 停止
void MOTO_STOP(void);
//07 06 00 21 00 00 電子齒輪比
void MOTO_GEAR_RATIO(void);



void MOTO_NEXT_ADDR(void);
//手動正反轉測試程式
void TEST_CW_CCW(void);


//bbb
void SPI_INIT(void)
{



//0000 0110
//SPI_CR1 = 0x06;//禁止啟動bit6=0

//0000 0100
//SPI_CR1 = 0x04;//禁止啟動bit6=0

//0000 0101
//SPI_CR1 = 0x05;//禁止啟動bit6=0


//0011 1110
SPI_CR1 = 0x2e;//禁止啟動bit6=0


//1100 0011
//SPI_CR2 = 0xc3;

//1100 0001
SPI_CR2 = 0xc1;

}


unsigned int CRC_16(unsigned char* data, unsigned char length);


//延遲時間
void _delay_us(u8 us)//us
{
	while(--us);
}
void _delay_ms(u8 us)//ms
{
	_delay_us(1000);
}
void _delay_s(u8 us)//s
{
	_delay_ms(1000);
}

void time_delay(void)
{
 for(flag0=0;flag0<100;++flag0)
{
_delay_s(10);
}
}
void time_delay2(void)
{
			//	for(flag0=0;flag0<10;++flag0)
				for(flag0=0;flag0<50;++flag0)
					{
					for(flag2=0;flag2<100;++flag2)
						{
						_delay_s(100);
						}	
					}
}
void time_delay3(void)
{
			//	for(flag0=0;flag0<10;++flag0)
				for(flag0=0;flag0<1000;++flag0)
					{
					for(flag2=0;flag2<100;++flag2)
						{
						_delay_s(100);
						}	
					}
}


//ggg
void STM8_GPIO(void)
{

	
  
//PA 上拉輸入
//0000 0000
	PA_DDR &= 0x00;
//1111 1111
	PA_CR1 |= 0xff;
//0000 0000
	PA_CR2 &= 0x00;
	
	
//PB 上拉輸入
//0000 0000
	PB_DDR &= 0x00;
//1111 1111
	PB_CR1 |= 0xff;
//0000 0000
	PB_CR2 &= 0x00;
	
//PC 上拉輸入
//0000 0000
	PC_DDR &= 0x00;
//1111 1111
	PC_CR1 |= 0xff;
//0000 0000
	PC_CR2 &= 0x00;
	
	
//PD 上拉輸入
//0000 0000
	PD_DDR &= 0x00;
//1111 1111
	PD_CR1 |= 0xff;
//0000 0000
	PD_CR2 &= 0x00;
	
//PC543 輸出
//0011 1000
	PC_DDR |= 0x38;
//0011 1000
	PC_CR1 |= 0x38;
//1100 0111
	PC_CR2 &= 0xc7;
	//0011 1000
	PC_ODR |= 0x38;

	
	
	
	
//PB4 輸出
//0001 0000
	PB_DDR |= 0x10;
//0001 0000
	PB_CR1 |= 0x10;
//1110 1111
	PB_CR2 &= 0xef;
//0001 0000
	PB_ODR |= 0x10;
	
	
	
	
	
	
	
	
	
	
//PD4 推挽輸出   //PD4 推挽輸出->有電流輸出 燈會亮  //開集極不會燒掉 不輸出電流 燈不會亮
//0001 0000
	PD_DDR |= 0x10;
//0001 0000
	PD_CR1 |= 0x10;
//1110 1111
	PD_CR2 &= 0xef;
	USART_OFF_LED;
	

	
	
	
	
	
	
		
	// DE
//	A2 輸出
//0000 0100
	PA_DDR |= 0x04;
//0000 0100
	PA_CR1 |= 0x04;
//1111 1011
	PA_CR2 &= 0xfb;
	//1111 1011
	PA_ODR &= 0xfb;
	
	//IN1;
	//if(flag10==0)
	//{
	//		 OUT1_ON;
 // }
//	else
	//{
	//	 OUT1_OFF;
 // }
	
	


}





void Init_UART(void) 
{ 
			
      UART1_CR1=0x00; 
      UART1_CR2=0x00; 
      UART1_CR3=0x00; 
      //設置波特率，必須注意以下幾點：
      // (1)必須先寫BRR2 
      // (2) BRR1存放的是分頻係數的第11位到第4位，
      // (3) BRR2存放的是分頻係數的第15位到第12位，和第3位
      //到第0位
      //例如對於波特率位9600時，分頻係數=2000000/9600=208 
      //對應的十六進制數為00D0，BBR1=0D,BBR2=00

      UART1_BRR2=0x00; 
      UART1_BRR1=0x0d; 
			
		//	UART1_BRR2=0x00;// 128k
     // UART1_BRR1=0x01; 
			
			
			
		//	UART1_BRR2=0x01; 
    //  UART1_BRR1=0x39;
      UART1_CR2=0x2C;//允許接收，發送，開接收中斷
	
	
} 
	 

//傳送位元
void UART1_sendchar(unsigned char j) 
{ 
      while((UART1_SR & 0x80)==0x00);
	
      UART1_DR=j; 
}
//8個資料鏈AAA
//modbus 21 06 10 00 00 01 1C BD
// 21 音箱位址 			06 單獨寫一位址
// 10 記憶位址高位 	01 記憶位址低位
// 00 資料高位  		01 資料低位 
// 1C CRC 低位 			BD CRC 高位
//rrr
@far @interrupt void UART_RX_IQU (void)
{
	
		{
		  //接收 datax[0][1][2][3][4][5][6][7]
			// 0-5 資料 6,7 check sum
	    flag82=1;
		  //停止uart發射痔送和接收	
			UART1_CR2=0x24;
			//接收UART傳來值
			while(UART1_RxNE==0){flag71=0x01;}
			datax[0] = UART1_DR;
			flag71=0x00;
	
			//是否有間隔信號
			while(UART1_RxNE==0){flag72=0x01;}
			//接收UART傳來值
			datax[1] = UART1_DR;
			flag72=0x00;
	
			//是否有間隔信號
			while(UART1_RxNE==0){flag73=0x01;}
			//接收UART傳來值
			datax[2] = UART1_DR;
			flag73=0x00;
		
			//是否有間隔信號
			while(UART1_RxNE==0){flag74=0x01;}
			//接收UART傳來值
			datax[3] = UART1_DR;
			flag74=0x00;
		
			//是否有間隔信號
			while(UART1_RxNE==0){flag75=0x01;}
			//接收UART傳來值
			datax[4] = UART1_DR;
			flag75=0x00;
		
				//是否有間隔信號
			while(UART1_RxNE==0){flag76=0x01;}
			//接收UART傳來值
			datax[5] = UART1_DR;
			flag76=0x00;
			//是否有間隔信號
			while(UART1_RxNE==0){flag77=0x01;}
			//接收UART傳來值
			datax[6] = UART1_DR;
			flag77=0x00;
			//是否有間隔信號
			while(UART1_RxNE==0){flag78=0x01;}
			//接收UART傳來值
			datax[7] = UART1_DR;
			flag78=0x00;
			
			
		}
	
		CRC_16(datax,6);
    //發射痔送和接收	
		UART1_CR2=0x28;
		
	
    //接受後的數據比對
    //局號為:21
//21 06 10 00 01 01 OUT1 ON 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x01 & datax[5]==0x01)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT1_ON;
			 }
	    }
	  }
  }

//21 06 10 00 01 00 OUT1 OFF 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x01 & datax[5]==0x00)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT1_OFF;
			 }
	    }
	  }
  }

//21 06 10 00 02 01 OUT2 ON 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x02 & datax[5]==0x01)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT2_ON;
			 }
	    }
	  }
  }

//21 06 10 00 02 00 OUT2 OFF 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x02 & datax[5]==0x00)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT2_OFF;
			 }
	    }
	  }
  }

//21 06 10 00 03 01 OUT3 ON 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x03 & datax[5]==0x01)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT3_ON;
			 }
	    }
	  }
  }

//21 06 10 00 03 00 OUT3 OFF 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x03 & datax[5]==0x00)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT3_OFF;
			 }
	    }
	  }
  }

//21 06 10 00 04 01 OUT4 ON 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x04 & datax[5]==0x01)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT4_ON;
			 }
	    }
	  }
  }

//21 06 10 00 04 00 OUT4 OFF 
	if( datax[0]==flag11  & datax[1]==0x06 )
	{
		if(datax[2]==0x10 & datax[3]==0x00)
	  {
	  	if(datax[4]==0x04 & datax[5]==0x00)
	    {
			 if(datax[6] == datax[8] & datax[7] == datax[9])
			 {	
			 //全部比對正確後發送
        UART_TX_IQU();
				OUT4_OFF;
			 }
	    }
	  }
  }


	
	for(flag80=0;flag80<1000;flag80++)
{
		flag81=flag71+flag72+flag73+flag74+flag75+flag76+flag77+flag78;
		
	if(flag81!=0)
		{
		
			flag71=0;
			flag72=0;
			flag73=0;
			flag74=0;
			flag75=0;
			flag76=0;
			flag77=0;
			flag78=0;
			flag79=0;
			
		}
	
}	
	

	if(flag82==1)
  {
	
	    flag82=0;
      //初始化 UART
			Init_UART();
			//	發射痔送和接收	
			UART1_CR2=0x2C;
  }
	//初始化 UART
			Init_UART();
			//	發射痔送和接收	
			UART1_CR2=0x2C;
			
			
		//RE=0 開啟
		//輸出0
		//1111 0111
		PA_ODR &= 0xf7;
				
}
//uuu
	void UART_TX_IQU (void)
{
	
				USART_ON_LED;
	      //DE=1 開啟
		    //輸出1
		    //0000 0100
			  PA_ODR |= 0x04;				

	      flag82=0;
		    //發射痔送和接收	
		  	UART1_CR2=0x28;
		    //開始uart發射傳送

	       while((UART1_SR & 0x80)==0x00);
	       UART1_DR=datax[0];
		
		     while((UART1_SR & 0x80)==0x00);
	       UART1_DR=datax[1];
		
		     while((UART1_SR & 0x80)==0x00);
		     UART1_DR=datax[2]; 
		
				 while((UART1_SR & 0x80)==0x00);
				 UART1_DR=datax[3];
		
				 while((UART1_SR & 0x80)==0x00);
				 UART1_DR=datax[4];
		
		     while((UART1_SR & 0x80)==0x00);
		     UART1_DR=datax[5]; 
		
				 while((UART1_SR & 0x80)==0x00);
				 UART1_DR=datax[8];
	       //UART1_DR=datax[6];
		     while((UART1_SR & 0x80)==0x00);
		     UART1_DR=datax[9]; 
		
		     while((UART1_SR & 0x80)==0x00);
		     datax[8]=0;
		     UART1_DR=datax[8];
	       //UART1_DR=datax[6];
		     while((UART1_SR & 0x80)==0x00);
		     datax[9]=0;
		     UART1_DR=datax[9]; 
		
		
		     USART_OFF_LED;
		     //DE=0  關閉
		     //輸出0
				 //1111 1011
		     PA_ODR &= 0xfb;	
		

				 
}	

@far @interrupt void TIME4 (void)
{
				
				//輸出0
				TIM4_SR =0x00; //清除中斷標誌
        //1110 1111
			//	PB_ODR =PB_ODR^0x10	;
	  
	     
				//0010 0000
	      //PB_ODR |= 0x20;//PB5 HIGH
				flag30++;
				TIM4_SR &=0xFE; //清除中斷標誌
			//	TIM4_SR= ~0x01; //清除更新中斷標誌
				
}

void TIME4_init(void)
{ 
	TIM4_IER =0X00;//禁止中斷
	TIM4_EGR =0X01;//允許產生更新事件
	TIM4_PSCR =0X07;//計數器時鐘=主時鐘/128=2M/128=15625
	TIM4_ARR =255;//重載計數器值.最大255
	TIM4_CNTR =255;//計數器初值.255
	TIM4_CR1 =0X01;//允許計數器工作
	TIM4_IER =0X01;//允許更新中斷
}	 



 

unsigned int CRC_16(unsigned char* data, unsigned char length)
{
 int j;
 unsigned int reg_crc=0xFFFF;
 while(length--)
 {
  reg_crc ^= *data++;
  for(j=0;j<8;j++)
  {
   if(reg_crc & 0x01) /* LSB(b0)=1 */
   reg_crc=(reg_crc>>1) ^ 0xA001;
   else
   reg_crc=reg_crc >>1;
  }
 }
 datax[8]=reg_crc;
 datax[9]=reg_crc>>8;
//return reg_crc;
} 
void CRC_16_TX_OUT (void)
{	
		CRC_16(datax,6);
		datax[6]= datax[8];
		datax[7]= datax[9];
		USART_ON_LED;
		UART_TX_IQU();
		USART_OFF_LED;
		for(flag21=0;flag21<1;flag21++)
		{
	  	for(flag20=0;flag20<7000;flag20++);
	  }
}	

//00 06 00 2C 00 00 開機清除rs-485導致顯示器閃跳動作
void OPEN_RS485_RESET(void)
{
    datax[0] =0x00;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x2C;
		datax[4] =0x00;
    datax[5] =0x00;
		
	CRC_16_TX_OUT();
}

//07 06 00 2C 00 00 正轉方向設定
void MOTO_CW_SET(void)
{
    datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x2C;
		datax[4] =0x00;
    datax[5] =0x00;
		
	CRC_16_TX_OUT();
}

//07 06 00 2C 00 01 反轉方向設定
void MOTO_CCW_SET(void)
{
    datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x2C;
		datax[4] =0x00;
    datax[5] =0x01;
		
	CRC_16_TX_OUT();
}


//07 06 00 20 00 11 手動正轉
	 	void MOTO_CW(void)
{
    datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x20;
		datax[4] =0x00;
    datax[5] =0x11;
		
	CRC_16_TX_OUT();
}
//07 06 00 20 00 12 手動反轉
void MOTO_CCW(void)
{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x20;
		datax[4] =0x00;
    datax[5] =0x12;
  CRC_16_TX_OUT();
}

//07 06 00 00 00 02 下次目標位置啟動
void MOTO_TO_NEXT_POINT(void)
{	 
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x00;
		datax[4] =0x00;
    datax[5] =0x02;
		CRC_16_TX_OUT();
}	
//07 06 00 20 00 10 啟動
void MOTO_STAR(void)
{	 
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x20;
		datax[4] =0x00;
    datax[5] =0x10;
		
		CRC_16_TX_OUT();
}	
//07 06 00 20 00 00 停止
void MOTO_STOP(void)
	{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x20;
		datax[4] =0x00;
    datax[5] =0x00;
	  CRC_16_TX_OUT();
	}
	
//07 06 00 47 00 03 加速
void MOTO_SPEEDUP(void)
	{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x47;
		datax[4] =0x00;
    datax[5] =0x03;
	  CRC_16_TX_OUT();
	}
//07 06 00 48 00 03 減速
void MOTO_SPEEDDOWN(void)
	{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x48;
		datax[4] =0x00;
    datax[5] =0x03;
	  CRC_16_TX_OUT();
	}
	
	
//07 06 00 21 00 00 定位high
void MOTO_NEXT_ADDR1(void)
{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x21;
		datax[4] =0x00;
    datax[5] =0x00;
		CRC_16_TX_OUT();
		
		
		//01 06 00 22 23 10 定位low
	 	
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x22;
		datax[4] =0x10;
    datax[5] =0x10;
		CRC_16_TX_OUT();
}	
//07 06 00 21 00 00 定位high
void MOTO_NEXT_ADDR2(void)
{
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x21;
		datax[4] =0x00;
    datax[5] =0x00;
		CRC_16_TX_OUT();
		
		
		//01 06 00 22 23 10 定位low
	 	
		datax[0] =0x07;
    datax[1] =0x06;
		datax[2] =0x00;
    datax[3] =0x22;
		datax[4] =0x23;
    datax[5] =0x10;
		CRC_16_TX_OUT();
}	



//電子齒輪比
void MOTO_GEAR_RATIO(void)
{
	//07 06 00 2C 00 11 (45)
	//07 06 00 2D 00 11 (46)
	
}
//手動正反轉測試程式
void TEST_CW_CCW(void)
{
    //07 06 00 20 00 11 手動正轉
	 	MOTO_CW();
		for(flag21=0;flag21<5;flag21++)
		{
	  	for(flag20=0;flag20<40000;flag20++);
	  }
		MOTO_STOP();
		//07 06 00 20 00 12 手動反轉
		MOTO_CCW();
		for(flag21=0;flag21<5;flag21++)
		{
	  	for(flag20=0;flag20<40000;flag20++);
	  }
		MOTO_STOP();
}

void MOTO_POINT_POINT_TEST(void)
{
      MOTO_STOP();
	    MOTO_NEXT_ADDR1();
	    
      MOTO_STAR();
	    for(flag21=0;flag21<10;flag21++)
	  	{
	  	for(flag20=0;flag20<40000;flag20++);
	    }
			MOTO_STOP();
	    MOTO_NEXT_ADDR2();
	    
      MOTO_STAR();
	    for(flag21=0;flag21<10;flag21++)
		  {
	  	for(flag20=0;flag20<40000;flag20++);
	    }
}
	
/*modbus_定位移動
2020/5/10
目標:建立所有modbus指令表(大致已經建立)
畫面顯示:
1.手動正轉/手動反轉*
2.緊急停止*
3.定位運轉
4.切換手動自動*
5.目前位置*
6.定位位置
7.設定畫面
8.手動速度(RPM)
設定畫面:
1.正轉速度(RPM)
2.加速(RPM)
3.反轉速度(RPM)
4.減速(RPM)
5.低位極限
6.高位極限
7.歸值設定
8.螺桿螺距
9.順逆轉

*/

void main(void) 
{ 
//開機延遲
			time_delay2();
//關閉中斷
			sim();
//初始化 GPIO
			STM8_GPIO();
//初始化 time4	
			
			TIME4_init();
			
			
			
			
//使能USART1 i2c時鐘	
			CLK_PCKENR1 |= 0X05; 
 
//初始化 UART
			Init_UART();

		
			//開啟中斷
	//		rim();
		//sss		
while(1)
 {
	 
		
   IN1;
   if(flag10==0)
	{ 
     flag18=0;
    for (flag29 = 0; flag29 < 1;flag29++)
    {   // small for loop outer
     for (flag30 = 0; flag30 < 40000;flag30++)
      {
      IN1; 
      if(flag10!=0)
       {
        flag18=0x01;
        break;
       }
			}
		}
   if(flag18==0)
   {
   flag12=1;
   flag13=0;
   flag14=0;
   flag15=0;
	 }
  }
	   
		 
	 IN2;
   if(flag10==0)
	{ 
     flag18=0; //偵測結果
    for (flag29 = 0; flag29 < 1;flag29++)
    {   // small for loop outer
     for (flag30 = 0; flag30 < 40000;flag30++)
      {
      IN2; 
      if(flag10!=0)
       {
        flag18=0x01;
        break;
       }
			}
		}
   if(flag18==0)
   {
   flag12=0;
	 flag13=1;
	 flag14=0;
	 flag15=0;
	 }
  }
		
	 IN3;
   if(flag10==0)
	{ 
     flag18=0;
    for (flag29 = 0; flag29 < 1;flag29++)
    {   // small for loop outer
     for (flag30 = 0; flag30 < 40000;flag30++)
      {
      IN3; 
      if(flag10!=0)
       {
        flag18=0x01;
        break;
       }
			}
		}
   if(flag18==0)
   {
   flag12=0;
	 flag13=0;
	 flag14=1;
	 flag15=0;
	 }
  }
		
		 
		
	 IN4;
   if(flag10==0)
	{ 
     flag18=0;
    for (flag29 = 0; flag29 < 1;flag29++)
    {   // small for loop outer
     for (flag30 = 0; flag30 < 40000;flag30++)
      {
      IN4; 
      if(flag10!=0)
       {
        flag18=0x01;
        break;
       }
			}
		}
   if(flag18==0)
   {
   flag12=0;
	 flag13=0;
	 flag14=0;
	 flag15=1;
	 }
  }
		
		
	
		{
		if(flag12==1){
			OUT1_ON;
			OUT2_ON;
			OUT3_ON;
			OUT4_ON;
		}
		
		
		if(flag13==1){
			OUT1_OFF;
			OUT2_OFF;
			OUT3_OFF;
			OUT4_OFF;
		}
		
		
		if(flag14==1){
			OUT1_ON;
			OUT2_ON;
			OUT3_OFF;
			OUT4_OFF;
		}
		
	
		if(flag15==1){
			OUT1_OFF;
			OUT2_OFF;
			OUT3_ON;
			OUT4_ON;
		}
		
	}
}		 
	
}		 
	



